########################## R COMMANDS #########################

dir()	# list files in local working directory
dir(pattern=".txt")		# list files ending with .txt

############# view libraries loaded into workspace ################
search()	
sessionInfo()
library()		### Lists all installed packages

################# Lists objects in memory/session ######################
object()
ls()

########################### Data structures ############################
str(x)	# Summary of the structure of the object
head()	# shows the first part of the object
na.omit(x) # Remove missing data from object x

################ Writing and Exporting to Disc ########################

png(file="...... .png", width=800, height=800)
write.csv(x, file="....... .csv")
write.table(x, "filename.csv", sep=",", row.names=F)

## writing pca output
> pca <- prcomp(data[,1:3])
> pcasum <- summary(pca)
> pcarot <- pca$rotation[,1:3]
> str(pcarot)	## Determine which elements to extract
> write.table(pcarot[,1:3], "filename.csv", sep=",")
> str(pcasum)	## Determine which elements to extract
> write.table(pcasum$importance, "filename.csv", sep=",")

###################### PLOTTING ######################################
## Histogram ##
> hist(data[,2], nclass=15, main="Title")
> par(mfrow=c(2,2))		## multiple panels in graph
> hist(data[,2], nclass=15, main="")

## Scatter plots##
# pairs/plots() do the same thing
> pairs(data[,2:5], pch=19, col=factor(data[,5]))
> plot(data[,2:5], pch=19, col=c("red", "blue", "green")[factor(data[,5])])

## Scatterplots with ggplot2 with regression lines ##
> qplot(data=scatter, HW.SVL, HW,colour=group, xlab="HW/SVL", ylab="HW") + geom_point(size=4) + geom_smooth(method=lm, se=F) + theme(legend.position="none", text=element_text(size=12), axis.title.x=element_text(size=12), axis.title.y=element_text(size=12))

## Using the package "car" ##
library(car)
> scatterplotMatrix(~mpg+disp+drat+wt, data=mtcars, diag="density", pch=19) # green line = simple regression line; red solid line = loess regression line (smoothed approximation); red dotted line = 95% CI for the loess line

> scatterplotMatrix(~mpg+disp+drat+wt | gear, data=mtcars, diag="density") # plot by symbol according conditioned on "gear"

### Plot PCA ### 
plot(pca$x[,1], pca$x[,2], col=as.integer(data$identifier), pch=data[,4], xlab="PC I", ylab="PC II")

### Plot 3D PCA using rgl ###
(http://planspace.org/2013/02/03/pca-3d-visualization-and-clustering-in-r/)
pca <- princomp(data[,7:17], scale.=FALSE, scores=TRUE)
library(rgl)

#species=grouping variable; size=plotting symbol size
> plot3d(pca$scores[,1:3], col=data$species, size=8)

### using scatterplot3d ###
scatterplot3d(data[,2:4], pch=19)
## insert labels on points ##
{
   s3d <- scatterplot3d(mda[,1:3],        # x y and z axis
                 color="blue", pch=19,    # filled blue circles
                 type="h",                # vertical lines to the x-y plane
                 xlab="Reptiles",
                 ylab="Birds",
                 zlab="Mammals")
    s3d.coords <- s3d$xyz.convert(mda[,1:3])# convert 3D coords to 2D proj
    text(s3d.coords$x, s3d.coords$y,        # x and y coordinates
         labels=row.names(mda), cex=.8, pos=4)
}

### Plot PCA with ggplot2; 
library(“ggplot2”)
species <- data[,1]
scores <- data.frame(species, pca$x[,1:2])
qplot(x=PC1, y=PC2, data=scores, shape=factor(species), color=factor(species), size=I(8)) + theme(axis.text=element_text(size=20), axis.title=element_text(size=20), legend.text=element_text(size=20))

## Plot pca with 95% confidence ellipse ##
library(MASS)
library(ellipse)
library(ggplot2)
library(devtools)
library(digest)
library(proto)

## using ellipse ##
x <- pca$x[,1]
y <- pca$x[,2]
group <- data$[,1]
df <- data.frame(x=x, y=y, group=factor(group))

df_ell <- data.frame() 
for(g in levels(df$group)){df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),scale=c(sd(x),sd(y)),centre=c(mean(x),mean(y))))),group=g))} 

p1 <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point() + 
  geom_path(data=df_ell, aes(x=x, y=y,colour=group))

## using proto ##
require(proto)
StatEllipse <- proto(ggplot2:::Stat,
	{
		required_aes <- c("x", "y")
		default_geom <- function(.) GeomPath
		objname <- "ellipse"

		calculate_groups <- function(., data, scales, ...){
			.super$calculate_groups(., data, scales,...)
		}
		calculate <- function(., data, scales, level = 0.75, segments = 51,...){
      dfn <- 2
      dfd <- length(data$x) - 1
      if (dfd < 3){
      	ellipse <- rbind(c(NA,NA))	
      } else {
          require(MASS)
          v <- cov.trob(cbind(data$x, data$y))
          shape <- v$cov
          center <- v$center
          radius <- sqrt(dfn * qf(level, dfn, dfd))
          angles <- (0:segments) * 2 * pi/segments
          unit.circle <- cbind(cos(angles), sin(angles))
          ellipse <- t(center + radius * t(unit.circle %*% chol(shape)))
      }
    
      ellipse <- as.data.frame(ellipse)
      colnames(ellipse) <- c("x","y")
      return(ellipse)
		}
	}
)

stat_ellipse <- function(mapping=NULL, data=NULL, geom="path", position="identity", ...) {
  StatEllipse$new(mapping=mapping, data=data, geom=geom, position=position, ...)
}

p2 <-qplot(data=df, x=x,y=y,colour=group, size=I(8))+stat_ellipse(level=0.95)+ theme(axis.text=element_text(size=20), axis.title=element_text(size=20), legend.text=element_text(size=20))


## Plot LDA with confidence ellipse ##

> lda <- lda(species~adjHL+adjHW+adjSNL+adjIND+adjED+adjFL+adjTBL+adjMTTL+adjFin3DW, data=adj)
> datPred <- data.frame(species=predict(lda)$class, predict(lda)$x)
> library(ellipse)
> dat_ell <- data.frame() 
> for(g in levels(datPred$species)){ 
+ dat_ell <- rbind(dat_ell, cbind(as.data.frame(with(datPred[datPred$species==g,], ellipse(cor(LD1, LD2), 
+                                          scale=c(sd(LD1),sd(LD2)), 
+                                          centre=c(mean(LD1),mean(LD2))))),species=g)) 
+ } 

>ggplot(datPred, aes(x=LD1, y=LD2, col=species) ) + geom_point( size = 8, aes(color = species))+theme_bw()+theme(axis.text=element_text(size=20), axis.title=element_text(size=20), legend.text=element_text(size=20))+geom_path(data=dat_ell,aes(x=x,y=y,color=species),size=1,linetype=1)


## biplot on pca plots; http://www.vince.vu/software/ ##
library(ggbiplot)
ggbiplot(pca, obs.scale=1, var.scale=1, groups=iris[,5], ellipse=T, circle=T)


############################## ANALYSES #############################
############################## ANALYSES #############################

### Summary stats ###
> colMeans(data[,2:5])	### Mean of columns 2:5
> aggregate(data[,2:4], by=list(data[,5]), mean) # aggregate data by mean according to factor
> aggregate(data[,2:4], by=list(data[,5]), sd) # aggregate according to standard deviation
> row.names(mda)=mda[,1]
> mda=mda[,-1]	# omit first column from dataset --> make it into a row


### PCA ###
pca <-prcomp(x, scale=F) ## scale=T if you want to standardize data
summary(pca)
(pca$sdev)^2 ## eigenvalues
pca$rotation ## loadings


### LDA ###
library(MASS)
lda <- lda(species ~ SVL + HL + HW + ……… Fin3DW, data=data)
lda.values <- predict(lad, data[3:19])	# get lad values
ld1 <- lda.values$x[,1] # get values for LD1

## LDA on PCA scores ##
library(adegenet)
> dapc4 <- dapc(adj[,3:11], adj$species)
# code of for PCA variance inset#
> myInset <- function(){
 temp <- dapc4$pca.eig
 temp <- 100* cumsum(temp)/sum(temp)
 plot(temp, col=rep(c("black","lightgrey"), c(dapc4$n.pca,1000)), ylim=c(0,100),
 xlab="PCA axis", ylab="Cumulated variance (%)", cex.lab=1.5, cex.axis=1.5, cex=1.25, pch=19, type="b", lwd=2)
 }
# plot
>scatter(dapc4, bg="white", pch=19, cex=2.5, clab=0, col=mycol, solid=1, cell=2.0,cstar=1,scree.pca=F, scree.da=F, leg=T, posi.leg="bottomleft")
# add inset to plot
add.scatter(myInset(), posi="bottomright", inset=c(0.0,0.0), ratio=.25, bg=transp("white"))



### Mann-Whitney test ####
> wilcox.test(data[,14]~data[,4])

### Regression
Glm.data <- glm(SVL~HL)
#for multiple var use:
GLM.data <-glm(SVL~ HL + HW + …)
#residuals:
Glm.resid <- resid(glm)

### Write output to CSV
Write.csv(glm.resid, file=”resid.csv”)

### Normality Test
#data=dataset; V1=response variable; species=grouping variable
with(data, tapply(V1, species, shapiro.test))

### ANOVA
> fit <- aov(SVL ~ sex, data=aurantipunctata)
> summary(fit)

### ANCOVA
#MTTL=response; SVL=covariate; Locality=grouping variable
> anc=aov(MTTL~SVL+Locality, data=pmindochi)
> summary(anc)

#Results: only interested in the p-value for the Locality row

    Df Sum Sq Mean Sq F value   Pr(>F)    
SVL          1 1.8405  1.8405   64.77 4.35e-09 ***
Locality     2 1.1661  0.5830   20.52 2.11e-06 ***
Residuals   31 0.8809  0.0284  
